name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          libasound2-dev \
          libx11-dev \
          xvfb

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
        # Install pygame and other game dependencies
        pip install pygame pygame_gui pygame_menu
        # Install additional testing dependencies
        pip install pytest-asyncio pytest-mock

    - name: Create requirements.txt if not exists
      run: |
        if [ ! -f requirements.txt ]; then
          echo "pygame>=2.5.0" > requirements.txt
          echo "pygame_gui>=0.6.0" >> requirements.txt
          echo "pygame_menu>=4.4.0" >> requirements.txt
          echo "pytest>=7.0.0" >> requirements.txt
          echo "pytest-cov>=4.0.0" >> requirements.txt
          echo "coverage>=7.0.0" >> requirements.txt
        fi

    - name: Install project dependencies
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: Run tests with coverage
      env:
        DISPLAY: ':99.0'
      run: |
        # Start virtual display for pygame
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

        # Run tests with coverage
        python -m pytest tests/ \
          --cov=core \
          --cov=ui \
          --cov=main \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --verbose \
          --tb=short

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30